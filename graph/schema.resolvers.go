package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/ryuji-cre8ive/huyou-server/db"
	"github.com/ryuji-cre8ive/huyou-server/graph/model"
	"github.com/ryuji-cre8ive/huyou-server/lib"
)

// CreateShopItem is the resolver for the createShopItem field.
func (r *mutationResolver) CreateShopItem(ctx context.Context, title string, description *string, image *string, price int, isContainDelivery bool, userID string) (*model.ShopItem, error) {
	auth := &db.Auth{
		Mail:     "random",
		Password: "random",
	}

	id := auth.GenerateRandomHash()

	shopItem := &model.ShopItem{
		ID:                id,
		Title:             title,
		Description:       description,
		UserID:            userID,
		Price:             price,
		IsContainDelivery: isContainDelivery,
		Image:             image,
	}
	r.DB.Create(&shopItem)
	return shopItem, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, mail string, password string) (*model.User, error) {
	auth := &db.Auth{
		Mail:     mail,
		Password: password,
	}

	hasedPassword, err := auth.HashPassword()
	if err != nil {
		return nil, err
	}

	id := auth.GenerateRandomHash()

	user := &model.User{
		ID:       id,
		Mail:     mail,
		Password: hasedPassword,
	}

	r.DB.Create(&user)
	fmt.Printf("user was created! %+v\n", user)
	return user, nil
}

// AppendNameForCreatedUser is the resolver for the appendNameForCreatedUser field.
func (r *mutationResolver) AppendNameForCreatedUser(ctx context.Context, image string, name string, userID string) (*model.User, error) {
	var user *model.User
	fmt.Println("user id: ", userID)
	r.DB.Where("id = (?)", userID).Find(&user)
	firstAssessment := 0
	user.Name = name
	user.Image = &image
	user.Assessment = &firstAssessment
	r.DB.Save(&user)
	return user, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment := &model.Comment{
		ID:         input.ID,
		Content:    input.Content,
		UserID:     input.UserID,
		ShopItemID: input.ShopItemID,
	}
	r.DB.Create(&comment)
	fmt.Printf("comment was created! %+v\n", comment)
	return comment, nil
}

// Follow is the resolver for the follow field.
func (r *mutationResolver) Follow(ctx context.Context, userID string, targetUserID string) (*model.Follower, error) {
	id := lib.GenerateRandomHash()
	follower := &model.Follower{
		ID:           id,
		UserID:       userID,
		TargetUserID: targetUserID,
	}
	fmt.Println("follow", follower, "was created!")
	r.DB.Create(&follower)
	return follower, nil
}

// Unfollow is the resolver for the unfollow field.
func (r *mutationResolver) Unfollow(ctx context.Context, userID string, targetUserID string) (bool, error) {
	var follower *model.Follower
	err := r.DB.Where("user_id = ? AND target_user_id = ?", userID, targetUserID).First(&follower).Error
	if err != nil {
		return false, err
	}

	fmt.Printf("delete follower: %+v", follower)
	err = r.DB.Delete(&follower).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.ShopItem, error) {
	items := make([]*model.ShopItem, 0)
	r.DB.Find(&items)
	fmt.Printf("items data: %+v\n", *items[0])
	return items, nil
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id string) (*model.ShopItem, error) {
	var item *model.ShopItem
	if err := r.DB.Where("id = (?)", id).Limit(20).First(&item).Error; err != nil {
		return nil, err
	}
	fmt.Printf("shopItem: %+v\n", item)
	return item, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	comments := make([]*model.Comment, 0)
	r.DB.Find(&comments)
	return comments, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	user := make([]*model.User, 0)
	r.DB.Find(&user)
	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	r.DB.Debug().Where("id = (?)", id).Find(&user)
	return user, nil
}

// UserWithMail is the resolver for the userWithMail field.
func (r *queryResolver) UserWithMail(ctx context.Context, mail string, password string) (*model.User, error) {
	var user *model.User
	result := r.DB.Where("mail = ?", mail).First(&user)
	if result.Error != nil {
		return nil, result.Error
	}

	auth := db.Auth{
		Mail:     mail,
		Password: password,
	}

	hashedPassword := auth.CheckPasswordHash(password, user.Password)
	if !hashedPassword {
		return nil, nil
	}

	return user, nil
}

// Following is the resolver for the following field.
func (r *queryResolver) Following(ctx context.Context, userID string) ([]*model.Follower, error) {
	followingUser := make([]*model.Follower, 0)
	r.DB.Debug().Where("user_id = (?)", userID).Find(&followingUser)
	fmt.Printf("followingUser: %+v", followingUser)
	return followingUser, nil
}

// Followers is the resolver for the followers field.
func (r *queryResolver) Followers(ctx context.Context, targetUserID string) ([]*model.Follower, error) {
	followers := make([]*model.Follower, 0)
	r.DB.Debug().Where("target_user_id = (?)", targetUserID).Find(&followers)
	return followers, nil
}

// User is the resolver for the user field.
func (r *shopItemResolver) User(ctx context.Context, obj *model.ShopItem) (*model.User, error) {
	var user *model.User
	r.DB.Debug().Where("id = (?)", obj.UserID).Find(&user)
	return user, nil
}

// ShopItem is the resolver for the ShopItem field.
func (r *userResolver) ShopItem(ctx context.Context, obj *model.User) ([]*model.ShopItem, error) {
	items := make([]*model.ShopItem, 0)
	r.DB.Debug().Where("user_id = (?)", obj.ID).Find(&items)
	return items, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// ShopItem returns ShopItemResolver implementation.
func (r *Resolver) ShopItem() ShopItemResolver { return &shopItemResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type shopItemResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
